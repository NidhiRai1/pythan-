//NUMPY - IT IS PYTHAN LIBRARY THAT PROVIDE MULTIDIMENTIONAL ARRAY OBJECT AMD IT IS FASTER THAN LIST

//ARRAY = [1 0 2 3]      &&&& //LIST [1 , 0 , 2 , 3]
//ADVANTAGES OF NUMPY ARRAY OVER PYTHAN LIST 
*IT CONSUME LESS MEMORY , CONVINENET TO USE ,AND FASTER AS COMPARE TO PYTHAN LIST
*WIDE VARITY OF MATHEMETICAL OPERATION PERFORM THROUGH ARRAY IN NUMPY
*DATA TYPE STORAGE - LIST [1 , "NIDHI" , 2]  ARRAY [1,2,3]
*MODIFICATION IS FATER IN LIST IN PYTHAN THEN NUMPY ARRAY
*MEMORY STORAGE IS LESS IN NUMPY ARRAY THEN LIST

//FORM ARRY 
import numpy as np
x = [1 , 2, 3 ,4]
y = np.array({1 , 2 , 3, 4])     or    np.array(x)
print(y)           // print = [1 2 3 4]
print(type(y))   // return numpy.array as the type

//let's creat array in the list 

i = []     //list

for i in range(1 ,5) :
new = int(print("enter the array"))  //input function me jo v data hota h wo string hota h so we need to put int in front to get integer

i.append(new)
print(np.array(i))
print(y.ndim)  // for checking the dimenssion here it is 1 dimenssion
//creating 1-D [1 2 3 ] 2-D [[1 2 3]] 3-D [[[1 2 3]]] ARRAY
arr = np.array([[1 , 2 , 3] , [4 , 5 , 6]])  //u can add lots of list here but remaimber the size of all the list need to be same
print(arr)
print(arr.ndim)   // 2-D

//zeros   and ones   and empty

arr = np.zeros(4)  or   np.ones(4)  or   np.emptty(4)
print(arr)
arr = np.zeros((3,4))  //arr of 2-D with all the element 0
print(arr)

//arrange 
arr = np.arange(4)        output = [0 1 2 3]
//diagonal element = 1else 0
arr = np.eye(3)           //3*3 ka unit matrix with diagonal = 1
//libespace 
arr = np.linespace(0 , 10 , num = 5)         output = [0 2.5 5 7.5 10]
//random array var = np.rabdom.rand(4)        output - is 4 elements random between 0 and 1
//var = np.random.rand( 4)                 include negetive number as well b/w 0 - 1
//var = np.random.randint(5 , 10 , 5)          (min , max , total)           use to generate a random number between a given number

//type of datatype -
bool_  - b. int_  - i, int8 , int16 , int32 , int64 , uint8 - u, uint16 , uint32 , uint64 , float_ ,float16 , 32 , 64 , complex_ - c, complex64 , 128
string - s , timedelta - m , datetime - M , obect - o ,
//how to find the data type 
*var = np.array([ 1 , 2 , 3 , 4])    -> print(var.dtype)
*var = np.array([ 1 , 2 , 3 , 4] ,dtype = np.int8)    -> print(var.dtype)              //it is use to ocnvert the datatype in others
*var = np.array([ 1 , 2 , 3 , 4] ,dtype = "f")    -> print(var.dtype)              //it is use to ocnvert the datatype in others
*var = np.array([ 1 , 2 , 3 , 4])
new = np.float32(var)
 print(var.dtype)        //it is use to ocnvert the datatype in others with the help of functions
print(new.dtype)
*astype use to convert directly from datatype to other
var = np.array([ 1 , 2 , 3 , 4])
new = var.astype(float32)    -> print(var.dtype)        ->print(new.dtype)      //it is use to ocnvert the datatype in others

//for mathemetical operation 
var = np.array([ 1 , 2 , 3 , 4])     -> var2 = np.array([6 , 7,8,9])
varadd = np.add(var , var2)
print(varadd)

np.substract(a,b)  , np.divide , np.mod(a ,b) , np.multiply , np.power , np.reciplocal(a)

//for arthemetic functions 
np.min(x) , np.max() , np.sqrt(x) ,np.cumsum() //comulative sum , np.argmin //position of min, np.sin() . np.cos(x)
                 for 2-d axis = 0 for coloum , axis = 1for row
var = np.array([ 1 , 2 , 3 , 4])        print(np.min(var) , np.argmin(var))           output - 1 0
//for 2-d
var = np.array([[ 1 , 2 , 3 , 4] , [9 , 6 , 7 ,8]])        print(np.min(var ,axis = 1))           output - 1 6  (min value along the row)
var = np.array([[ 1 , 2 , 3 , 4] ,[1, 3, 4, 5]])        print(np.shape)           output - [2 4]
var = np.array([ 1 , 2 , 3 , 4] , ndmin = 4)        print(np.ndim)           output - 4 (check out the dimesion)
//reshape 
var = np.array([ 1 , 2 , 3 ,6, 7 ,8])        print(np.reshape(3 , 2))       print(np.ndim)      output - [[ 1 2] [3 6] [7 8]]  2 (reshae from 1 -> 2 or 3)
//broadcasting two rules - saame dimession 2 if not then 1 in both  row and col like 1 , 3 and 3,1  it form max of both type of matrix i.e 3,3
var = np.arr([1,2,3])
var1 = np.arr([1] ,[3] ,[5])
varadd = var + var1
print(varadd)                        output [[2 3 4] [4 5 6] [6 7 8]]

//indexing
var = np.array([ 1 , 2 , 3 ,6, 7 ,8])
print(var[2])  output = 3       print(var[-5])  output = 8
var1 = np.array([ 1 , 2 , 3 ],[6, 7 ,8])
print(var1[1,1])        output = 7 

//slicing    strarting:stop +1
var = np.array([ 1 , 2 , 3 ,6, 7 ,8])
print("get from 1 to 4' , var[1:4])          output [2 3 6]
print(var[:5])                          output = [1 2 3 6 7]
var = np.array([ 1 , 2 , 3 ] ,[6, 7 ,8])
print(var[1,0 :])         output = [6 7 8]

//iteration
var = np.array([9 , 7, 4 , 1])
for i in var:
print(i)                         output = [9 7 4 1]
v = var.copy/()           print(v)       //after changing the original data we don't able to find any change in copy data
v1 = var.copy()            print(v)        //after changing the orignal data their is change in view data

//join
var = np.array([9 , 7, 4 , 1])
var1 = np.array([9 , 7, 4 , 1])
co = np.concatenate((var , var1))        print(co)           output =[9 7 4 1 1 9 7 4 1]
in 2-D
var = np.array([[9 , 7], [4 , 1]])
var1 = np.array([[6, 7], [3, 1]])
co = np.concatenate((var , var1) ,axis= 1)     print(co)          output = [[9 7 6 7] [4 1 3 1]]

